from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for
from werkzeug.utils import secure_filename
import os
import uuid
import json
import zipfile
import shutil
import logging
import sys
from datetime import datetime
from PIL import Image, ImageOps
import io
import xml.etree.ElementTree as ET
from PIL.PngImagePlugin import PngInfo

# Production configuration
app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024  # 10MB max file size
app.config['UPLOAD_FOLDER'] = 'temp'
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'fallback-secret-key-for-development')

# Production logging
if not app.debug:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(levelname)s: %(message)s',
        handlers=[logging.StreamHandler(sys.stdout)]
    )
    app.logger.setLevel(logging.INFO)
    app.logger.info('üöÄ Favicon Generator Production Mode Started')

# T·∫°o th∆∞ m·ª•c temp n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists('temp'):
    os.makedirs('temp')

# C√°c ƒë·ªãnh d·∫°ng file ƒë∆∞·ª£c ph√©p
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def get_icon_sizes(only_favicon=False, extension='png'):
    """L·∫•y danh s√°ch k√≠ch th∆∞·ªõc icon c·∫ßn t·∫°o"""
    if only_favicon:
        return {'favicon.ico': 16}
    
    sizes = {
        # Web favicons
        f"favicon-16x16.{extension}": 16,
        f"favicon-32x32.{extension}": 32,
        f"favicon-96x96.{extension}": 96,
        
        # Android icons
        f"android-icon-36x36.{extension}": 36,
        f"android-icon-48x48.{extension}": 48,
        f"android-icon-72x72.{extension}": 72,
        f"android-icon-96x96.{extension}": 96,
        f"android-icon-144x144.{extension}": 144,
        f"android-icon-192x192.{extension}": 192,
        
        # Apple Touch icons
        f"apple-icon-40x40.{extension}": 40,
        f"apple-icon-58x58.{extension}": 58,
        f"apple-icon-60x60.{extension}": 60,
        f"apple-icon-76x76.{extension}": 76,
        f"apple-icon-80x80.{extension}": 80,
        f"apple-icon-87x87.{extension}": 87,
        f"apple-icon-114x114.{extension}": 114,
        f"apple-icon-120x120.{extension}": 120,
        f"apple-icon-128x128.{extension}": 128,
        f"apple-icon-136x136.{extension}": 136,
        f"apple-icon-144x144.{extension}": 144,
        f"apple-icon-152x152.{extension}": 152,
        f"apple-icon-167x167.{extension}": 167,
        f"apple-icon-180x180.{extension}": 180,
        f"apple-icon-192x192.{extension}": 192,
        f"apple-icon-1024x1024.{extension}": 1024,
        
        # Microsoft icons
        f"ms-icon-70x70.{extension}": 70,
        f"ms-icon-144x144.{extension}": 144,
        f"ms-icon-150x150.{extension}": 150,
        f"ms-icon-310x310.{extension}": 310
    }
    
    # Th√™m favicon.ico
    sizes['favicon.ico'] = 16
    
    return sizes

def create_icons_from_image(image_path, sizes, temp_path, maintain_dimensions=True, original_extension='png'):
    """T·∫°o icons t·ª´ h√¨nh ·∫£nh g·ªëc"""
    original_image = Image.open(image_path)
    
    # Chuy·ªÉn ƒë·ªïi sang RGBA n·∫øu c·∫ßn
    if original_image.mode != 'RGBA':
        original_image = original_image.convert('RGBA')
    
    for filename, size in sizes.items():
        try:
            # T·∫°o b·∫£n sao c·ªßa h√¨nh ·∫£nh g·ªëc
            img = original_image.copy()
            
            if maintain_dimensions:
                # Resize gi·ªØ t·ª∑ l·ªá v√† th√™m padding tr·∫Øng
                img.thumbnail((size, size), Image.Resampling.LANCZOS)
                
                # T·∫°o canvas tr·∫Øng
                new_img = Image.new('RGBA', (size, size), (255, 255, 255, 0))
                
                # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ cƒÉn gi·ªØa
                x = (size - img.width) // 2
                y = (size - img.height) // 2
                
                # D√°n h√¨nh ·∫£nh v√†o gi·ªØa canvas
                new_img.paste(img, (x, y), img)
                img = new_img
            else:
                # Resize c∆∞·ª°ng b·ª©c v·ªÅ k√≠ch th∆∞·ªõc ch√≠nh x√°c
                img = img.resize((size, size), Image.Resampling.LANCZOS)
            
            # L∆∞u file
            file_path = os.path.join(temp_path, filename)
            
            if filename.endswith('.ico'):
                # T·∫°o file ICO
                img = img.convert('RGBA')
                img.save(file_path, format='ICO', sizes=[(size, size)])
            else:
                img.save(file_path, format='PNG')
                    
        except Exception as e:
            print(f"L·ªói khi t·∫°o {filename}: {str(e)}")
            continue

def create_apple_icons_folder(image_path, temp_path, maintain_dimensions=True, original_extension='png'):
    """T·∫°o th∆∞ m·ª•c icons v·ªõi t√™n ƒë∆°n gi·∫£n cho Apple"""
    icons_path = os.path.join(temp_path, 'icons')
    os.makedirs(icons_path, exist_ok=True)
    
    apple_sizes = [40, 58, 60, 76, 80, 87, 114, 120, 128, 136, 144, 152, 167, 180, 192, 1024]
    original_image = Image.open(image_path)
    
    if original_image.mode != 'RGBA':
        original_image = original_image.convert('RGBA')
    
    for size in apple_sizes:
        try:
            img = original_image.copy()
            
            if maintain_dimensions:
                img.thumbnail((size, size), Image.Resampling.LANCZOS)
                new_img = Image.new('RGBA', (size, size), (255, 255, 255, 0))
                x = (size - img.width) // 2
                y = (size - img.height) // 2
                new_img.paste(img, (x, y), img)
                img = new_img
            else:
                img = img.resize((size, size), Image.Resampling.LANCZOS)
            
            filename = f"{size}x{size}.{original_extension}"
            file_path = os.path.join(icons_path, filename)
            
            img.save(file_path, format='PNG')
                
        except Exception as e:
            print(f"L·ªói khi t·∫°o Apple icon {size}x{size}: {str(e)}")
            continue

def create_manifest(temp_path, extension='png'):
    """T·∫°o file manifest.json"""
    content_type = 'image/jpeg' if extension.lower() in ['jpg', 'jpeg'] else f'image/{extension}'
    
    manifest = {
        "name": "Generated App",
        "icons": [
            {"src": f"/android-icon-36x36.{extension}", "sizes": "36x36", "type": content_type, "density": "0.75"},
            {"src": f"/android-icon-48x48.{extension}", "sizes": "48x48", "type": content_type, "density": "1.0"},
            {"src": f"/android-icon-72x72.{extension}", "sizes": "72x72", "type": content_type, "density": "1.5"},
            {"src": f"/android-icon-96x96.{extension}", "sizes": "96x96", "type": content_type, "density": "2.0"},
            {"src": f"/android-icon-144x144.{extension}", "sizes": "144x144", "type": content_type, "density": "3.0"},
            {"src": f"/android-icon-192x192.{extension}", "sizes": "192x192", "type": content_type, "density": "4.0"}
        ]
    }
    
    with open(os.path.join(temp_path, 'manifest.json'), 'w', encoding='utf-8') as f:
        json.dump(manifest, f, indent=2, ensure_ascii=False)

def create_browserconfig(temp_path, extension='png'):
    """T·∫°o file browserconfig.xml"""
    browserconfig = f'''<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
    <msapplication>
        <tile>
            <square70x70logo src="/ms-icon-70x70.{extension}"/>
            <square150x150logo src="/ms-icon-150x150.{extension}"/>
            <square310x310logo src="/ms-icon-310x310.{extension}"/>
            <TileColor>#ffffff</TileColor>
        </tile>
    </msapplication>
</browserconfig>'''
    
    with open(os.path.join(temp_path, 'browserconfig.xml'), 'w', encoding='utf-8') as f:
        f.write(browserconfig)

def create_zip_file(temp_path, unique_id):
    """T·∫°o file ZIP ch·ª©a t·∫•t c·∫£ icons"""
    zip_path = os.path.join('temp', f'favicon-{unique_id}.zip')
    
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(temp_path):
            for file in files:
                if file.startswith('original.'):
                    continue  # B·ªè qua file g·ªëc
                
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, temp_path)
                zipf.write(file_path, arcname)
    
    # X√≥a th∆∞ m·ª•c temp sau khi t·∫°o ZIP xong
    cleanup_directory(temp_path)
    
    return zip_path

def cleanup_directory(directory):
    """X√≥a th∆∞ m·ª•c v√† n·ªôi dung"""
    if os.path.exists(directory):
        shutil.rmtree(directory)

@app.route('/health')
def health_check():
    """Health check endpoint cho Railway"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': 'favicon-generator'
    }), 200

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate', methods=['POST'])
def generate():
    try:
        app.logger.info(f'New favicon generation request from {request.remote_addr}')
        
        # Ki·ªÉm tra file upload
        if 'image' not in request.files:
            app.logger.warning('No file uploaded')
            return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n'}), 400
        
        file = request.files['image']
        if file.filename == '':
            return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'success': False, 'message': 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£'}), 400
        
        # L·∫•y c√°c t√πy ch·ªçn
        maintain_dimensions = request.form.get('maintain_dimensions') == 'on'
        generation_type = request.form.get('generation_type', 'full_set')
        only_favicon = generation_type == 'favicon_only'
        
        # T·∫°o th∆∞ m·ª•c t·∫°m th·ªùi
        unique_id = str(uuid.uuid4())[:16]
        temp_path = os.path.join('temp', unique_id)
        os.makedirs(temp_path, exist_ok=True)
        
        # L∆∞u file g·ªëc
        filename = secure_filename(file.filename)
        original_extension = filename.rsplit('.', 1)[1].lower()
        original_path = os.path.join(temp_path, f'original.{original_extension}')
        file.save(original_path)

        # Resize v·ªÅ 1024x1024 n·∫øu ch∆∞a ƒë√∫ng k√≠ch th∆∞·ªõc
        with Image.open(original_path) as img:
            if img.width != 1024 or img.height != 1024:
                img = img.convert('RGB')
                img = img.resize((1024, 1024), Image.Resampling.LANCZOS)
                img.save(original_path, format='PNG')
        
        # L·∫•y danh s√°ch k√≠ch th∆∞·ªõc c·∫ßn t·∫°o
        sizes = get_icon_sizes(only_favicon, original_extension)
        
        # T·∫°o icons
        create_icons_from_image(original_path, sizes, temp_path, maintain_dimensions, original_extension)
        
        # N·∫øu ch·ªâ t·∫°o favicon
        if only_favicon:
            favicon_path = os.path.join(temp_path, 'favicon.ico')
            if os.path.exists(favicon_path):
                return jsonify({
                    'success': True,
                    'download_url': f'/direct/{unique_id}/favicon',
                    'is_single_file': True,
                    'filename': 'favicon.ico'
                })
        
        # T·∫°o th√™m c√°c file b·ªï sung cho full set
        if not only_favicon:
            create_apple_icons_folder(original_path, temp_path, maintain_dimensions, original_extension)
            create_manifest(temp_path, original_extension)
            create_browserconfig(temp_path, original_extension)
        
        # T·∫°o file ZIP
        zip_path = create_zip_file(temp_path, unique_id)
        
        return jsonify({
            'success': True,
            'download_url': f'/download/{os.path.basename(zip_path)}',
            'is_single_file': False
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'L·ªói x·ª≠ l√Ω: {str(e)}'}), 500

@app.route('/download/<filename>')
def download_file(filename):
    try:
        file_path = os.path.join('temp', filename)
        if not os.path.exists(file_path):
            return "File kh√¥ng t·ªìn t·∫°i", 404
        
        def remove_file(response):
            try:
                os.remove(file_path)
            except:
                pass
            return response
        
        return send_file(file_path, as_attachment=True, download_name=filename)
    except Exception as e:
        return f"L·ªói t·∫£i file: {str(e)}", 500

@app.route('/direct/<file_id>/<file_type>')
def download_direct(file_id, file_type):
    try:
        if file_type == 'favicon':
            temp_path = os.path.join('temp', file_id)
            favicon_path = os.path.join(temp_path, 'favicon.ico')
            
            if not os.path.exists(favicon_path):
                return "File kh√¥ng t·ªìn t·∫°i", 404
            
            return send_file(favicon_path, as_attachment=True, download_name='favicon.ico')
        
        return "Lo·∫°i file kh√¥ng h·ªó tr·ª£", 404
    except Exception as e:
        return f"L·ªói t·∫£i file: {str(e)}", 500

@app.route('/cleanup/<file_id>', methods=['DELETE'])
def cleanup(file_id):
    try:
        # Ki·ªÉm tra n·∫øu l√† file ZIP
        if file_id.endswith('.zip'):
            # Ch·ªâ c·∫ßn x√≥a file ZIP (th∆∞ m·ª•c temp ƒë√£ b·ªã x√≥a khi t·∫°o ZIP)
            zip_path = os.path.join('temp', file_id)
            if os.path.exists(zip_path):
                os.remove(zip_path)
        else:
            # X√≥a th∆∞ m·ª•c (cho tr∆∞·ªùng h·ª£p favicon only)
            temp_path = os.path.join('temp', file_id)
            if os.path.exists(temp_path):
                cleanup_directory(temp_path)
        
        return jsonify({'success': True, 'message': 'ƒê√£ d·ªçn d·∫πp th√†nh c√¥ng!'})
    except Exception as e:
        return jsonify({'success': True, 'message': 'ƒê√£ d·ªçn d·∫πp th√†nh c√¥ng!'})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(debug=False, host='0.0.0.0', port=port)